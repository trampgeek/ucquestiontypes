<?xml version="1.0" encoding="UTF-8"?>
<quiz>
<!-- question: 19361  -->
  <question type="coderunner">
    <name>
      <text>UOC_PROTOTYPE_python3_stage1</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p><span style="font-size: 0.9375rem;">Prototype for a COSC121 Python3 question that is checked by pylint before being executed. Other style checks are also implemented.</span></p><p><span style="font-size: 0.9375rem;"></span></p><p>It can take the following template parameters.</p><ul><li><p><strong>abortonerror</strong>: true to abort testing when a runtime error occurs. Default: true</p></li><li><p><strong>allowglobals</strong>: set this to true to allow global variables (i.e. to allow lowercase globals, not just "constants"). Default: false.</p></li><li><p><strong>allownestedfunctions</strong>: set this to true to allow functions to be declared with a non-global scope. Default: false.</p></li><li><p></p><div><div><strong>banglobalcode</strong>: If true, no global assignment (except global constants), for, while and if constructs are allowed. Default: true</div></div><p></p></li><li><p><strong>checktemplateparams</strong>: set this false to bypass the usual check for validity of template params (e.g. when doing randomisation, although prefixing the extra template params with '_' is preferred).</p></li><li><strong>dpi</strong>. The dots-per-inch value to use for any matplotlib images. Default value: 65<br></li></ul><ul><li><p><strong>echostandardinput</strong>. If false, the standard builtin Python&nbsp;<em>input</em>&nbsp;function will be used. Otherwise, it will be replaced with a version that echoes the prompt to standard output to mimic the behaviour observed when standard input comes from the keyboard. Default: True<br></p></li><li><p><strong>extra:&nbsp;</strong>should be a string, one of "", "pretest" or "posttest". If set and not empty, the TEST.extra field is inserted into the program before or after TEST.testcode for the values "pretest" and "posttest" respectively. Default: ""</p></li><li><p><strong>floattolerance</strong>: a floating point number which, if defined and non-None, changes the test for correct output as follows. The&nbsp;<em>expected</em>&nbsp;and&nbsp;<em>got</em>&nbsp;outputs are both right-stripped then broken into lines. If the number of lines don't match, the answer is deemed wrong. Then (after compressing white space to a single character if&nbsp;<em>strictwhitespace</em>&nbsp;is false) the&nbsp;<em>got</em>&nbsp;and&nbsp;<em>expected</em>&nbsp;outputs are compared line for line. Each line is split by a regular expression pattern that matches any floating point number or integer and the two lines are compared token by token. If both tokens are numbers they must be equal to within&nbsp;&nbsp;<em>floattolerance</em>. The actual test is abs(float(f1) - float(f2) &lt;= floattolerance * 1.0001. The factor of 1.0001 is to allow for floating point error in the case where two decimal numbers that appear to satisfy the criterion, such as 0.65 and 0.65 with a float tolerance of 0.01, actually don't quite. If&nbsp;<em>floattolerance</em>&nbsp;is 0.0 the effect is to treat ints as floats, e.g.&nbsp; 1 and 1.0 will be deemed equal. Default: None<br></p></li><li><p><strong>forcepylint</strong>: if true, run the precheckers (pylint and/or mypy) regardless of whether or not the local checks found errors. Default: false.</p></li><li><p><strong>globalextra</strong>: should be a string, one of "", "pretest" or "posttest". If set and not empty, the QUESTION.globalextra field is inserted into the program before or after TEST.testcode for the values "pretest" and "posttest" respectively. If TEST.extra and QUESTION.globalextra are both being inserted before the test or both are being inserted after the test, the globalextra precedes the TEST.extra. Default: ""</p></li></ul><ul><li><p><strong>imagewidth</strong>: if this is given it sets the width in pixels of any matplotlib images inserted into the result table. Height is automatically scaled to match. Otherwise the image is inserted unscaled. Ignored unless&nbsp;<em>usesmatplotlib</em>&nbsp;is true. Default: None.</p></li><li><p><strong>imports</strong>: this is a list of python import strings. Each string is either just a python module name or a full python import string. If just&nbsp;<em>name</em>&nbsp;is given, the import statement is simply "import name", otherwise the import string is used as given. For example:</p><pre>{ "imports": ["math", "from blah import thing as twaddle"] }</pre><p>Imports go at the very start of the generated program. This mechanism can be used to import test support functions, too, and is preferred over the use of a&nbsp;<tt>_prefix.py</tt>&nbsp;file.</p></li><li><p><strong>isfunction</strong>: unless this is explicitly set to false, or the student's code already begins with a docstring, a dummy module docstring will be inserted at the start of the program<strong>.</strong>&nbsp; Also, if&nbsp;<em>isfunction</em>&nbsp;is true, the supplied code will be run stand-alone to check if it generates any output and an error message will be generated if it does.&nbsp;Thus, if your question is of the "write a program" variety, you should&nbsp;set this to false. Otherwise omit it. Default: true.</p></li><li><p><strong>localprechecks</strong>: if true, run the local prechecks for things like global code, required/proscribed functions and constructs, unexpected output. If local prechecks give any errors, the precheckers (pylint, mypy) will not be run unless&nbsp;<em>forcepylint&nbsp;</em>is true. Default: true.</p></li><li><p><strong>maxfunctionlength</strong>: this is the maximum number of statements that a function body can contain. Statements within statements are counted. Blank lines and comments aren't statements.&nbsp;&nbsp;This is a more-reliable alternative to the pylint max-statements parameter, which behaves strangely at times.&nbsp;</p></li><li><p><strong>maxnumconstants</strong>: the maximum number of constants (i.e. uppercase globals) allowed. An integer, defaulting to 4.</p></li><li><p><strong>maxoutputbytes</strong>: the maximum allowed number of output bytes. Default 10000.<br></p></li><li><p><strong>maxstringlength:&nbsp;</strong>the maximum allowed length of the output string or error string in the result table. Strings longer than this have their inner content snipped out. An integer defaulting to 2000.</p></li><li><p><strong>norun</strong>: if set to true, the normal execution of the student's code will not take place. Any test code provided will however still be run.</p></li><li><p><strong>nostylechecks</strong>: true to suppress all normal style checking, including the checkers listed in "precheckers". Default: false</p></li><li><p><strong>notest</strong>: if present and set to true, the test code will not be inserted into the code to be executed. Its role is then just as documentation for the student (as it still appears in the result table).</p></li><li><p><strong>parsonsproblemthreshold:&nbsp;</strong>if a wrong answer is submitted and the number of submissions (Checks) is greater than or equal to this value (parsonsproblemthreshold) the student is presented with a link that, if clicked, will expose the author's answer with all indentation removed and the order scrambled.</p></li><li><p><strong>precheckers</strong>: a list of the names of programs to be run when prechecking the correctness of the code. Currently only "pylint" and "mypy" are supported. These prechecks do not run if local checks give an error unless&nbsp;<em>forcepylint&nbsp;</em>is true. Default: ["pylint"].<br></p></li><li><p><strong>prelude</strong>: a possibly multi-line string that is inserted into the file&nbsp;after any imports and other template-generated code but before the student answer (and before the _prefix.py file, if supplied).</p></li><li><p><strong>proscribedbuiltins</strong>: this is a list of the Python built-in functions that cannot be used. Default: ["exec", "eval"].</p></li><li><p><strong>proscribedconstructs</strong>: this is a list of Python constructs (if, while, def, slice, listcomprehension, etc) that<em>&nbsp;must not</em>&nbsp;appear in the student's program.</p></li><li><p><strong>proscribedfunctions</strong>: this is a list of functions (sum, product, etc) that&nbsp;<em>must not</em>&nbsp;appear in the student's program. Default: []</p></li><li><p><strong>proscribedsubstrings</strong>: this is a list of strings that&nbsp;<em>must not</em>&nbsp;appear anywhere in the student's program (even in comments). Default: []</p></li><li><strong>pylintoptions</strong>. A list of strings to be added to the default list of options to pylint (relevant only if "pylint" is specified as one of the precheckers).&nbsp;For example, the Template parameters string in the question authoring form might be set to<pre>{"isfunction": false, "pylintoptions":["--max-statements=20","--max-args=3"]}</pre>to suppress the insertion of a dummy module docstring at the start and to set the maximum number of statements and arguments for each function to 20 and 3 respectively. Default options:<p></p><ul><li>"--disable=C0303,C0325,C0330,R0903,R0915,star-args,unbalanced-tuple-unpacking,consider-using-enumerate,simplifiable-if-statement,consider-iterating-dictionary,trailing-newlines"</li><li>"--enable=C0326"</li><li>"--good-names=i,j,k,n,s,c,_"<br></li></ul></li><li><p><strong>requiredconstructs</strong>:&nbsp;this is a list of Python constructs (if, while, def, etc) that<strong>&nbsp;must&nbsp;</strong>appear in the student's program. Default: []</p></li><li><p><strong>requiredfunctiondefinitions</strong>: this is a list of the names of the functions that must be defined within the student's program. Default: []</p></li><li><p><strong>requiredfunctioncalls</strong>: this is a list of the names of functions that must be explicitly called within the student's code</p></li><li><p><strong>requiredsubstrings</strong>: this is either a list of strings that&nbsp;<strong>must</strong>&nbsp;appear somewhere in the students code. Or a list of json objects with the keys "string", "pattern" and "errormessage". Only one of "string" or "pattern" should be supplies. "String" corresponds to a string that must appear in the students code and "pattern" corresponds to a python regular expression that must match somewhere in the students code. "errormessage" is the feedback that will be given to students when they fail this on precheck.<br></p></li><li><p><strong>requiretypehints</strong>: if&nbsp;<em>True</em>&nbsp;all functions must have type hints for all parameters and the return type. Default: False<br></p></li><li><p><strong>restrictedfiles</strong>: this specifies which files the students program is allowed to open. It is dictionary with two optional keys 'onlyallow' and 'disallow'. Each of these should map to a list of files that are allowed to be opened and filenames that are not allowed to be opened. The filenames in the lists can be a regex.<br>Default:</p><pre>{"disallow": ["__.*", "prog.*", "pytester.py"]</pre><p></p></li><li><p><strong>restrictedmodules</strong>: A dictionary that specifies what modules are to be restricted. Keys are the names of modules and the values are a dictionary with two keys 'onlyallow' and 'disallow'. Each of these is a list of the names of objects within the module which are allowed or disallowed. The names of objects in these lists can be a regex.&nbsp; This is a runtime check only, not part of style checker.<br>Default:</p><pre> "restrictedmodules": {
    "builtins": {"onlyallow": []},
    "imp": {"onlyallow": []},
    "importlib": {"onlyallow": []},
    "os": {"disallow": ["system", "_exit", "_.*"]},
    "subprocess": {"onlyallow": []},
    "sys": {"onlyallow": []},
}</pre><p></p></li><li><p><strong>runextra</strong>: if set (to any value) the Extra Template Data is added to the program as test code&nbsp;<em>before</em>&nbsp;the usual testcode. [Deprecated: use the&nbsp;<em>extra</em>&nbsp;parameter instead.]</p></li><li><strong>showfeedbackwhenright</strong>:<strong>&nbsp;</strong>If true then if a student provides a valid solution then the student is presented with an option to see the question authors solution.<br>Default: false<br></li><li><p><strong>strictwhitespace</strong>: by default when checking correctness trailing blank lines and trailing white space on each line are ignored but otherwise white space must match exactly. If this parameter is set to false, white space within a line may vary, i.e., multiple spaces are treated as 1 space. Default: true</p></li><li><p><strong>stripmain</strong>: if set to true, the program is expected to contain a global invocation of the main function, which is a line starting "main()". That line is deleted from the program. If the line is not present a "Missing call to main" exception is raised.</p></li><li><p><strong>stripmainifpresent</strong>: if set to true and the program contains a global invocation of a main function, which is a line starting "main()", that line is deleted from the program. Otherwise nothing happens (cf stripmain).</p></li><li><p><strong>suppresspassiveoutput</strong>: if set to true, any output generated by the student code even without any CodeRunner tests being run is ignored. This can be used, for example, to ignore output from any test code the student has included&nbsp;<em>and/or</em>&nbsp;to ignore the main output from a "write a program question". Only the output generated by CodeRunner tests will be displayed and marked. Default: false.</p></li><li><p><strong>timeout</strong>: number of seconds allowed for each test case. Default: 5 secs. Be careful to ensure that the total time for all test cases can not exceed&nbsp;<strong>totaltimeout</strong>, particularly if&nbsp;<em>abortonerror</em>&nbsp;is false.</p></li><li><p><strong>totaltimeout</strong>: total number of seconds allowed for the whole run. Cannot exceed the maximum allowed by Jobe, which is 50 seconds (and which is the default value for this parameter).</p></li><li><p><strong>useanswerfortests</strong>: if true, a run with the sample answer precedes the run with the student answer and the results from the sample answer are used for correctness testing&nbsp;<em>but only if no expected output is supplied</em>. However, because this takes place at runtime, this doesn't work for "Use as example" tests, for which the expected output must be supplied by the question author.</p></li><li><p><strong>usesmatplotlib:&nbsp;</strong>if true, header text is inserted at the start of the program to switch matlab graph output to use the non-interactive 'Agg' backend, which writes images to disk an .PNGs. After each test, the current state of the pyplot figure is saved to a new file. When all tests have been run and graded, the set of image files is inserted row-by-row into the result table with each figure below any text in the cell. For this to work correctly at least the first test must create a figure. The image is not graded - it is provided only for reference, so usually the test code will need to extract and display attributes of the current figure independently. See also the template parameters&nbsp;<em>useanswerfortests</em>, which results in the expected images being inserted into the table too and&nbsp;<em>imagewidth&nbsp;</em>which sets the width (and hence height by uniform scaling) to a desired number of pixels. Note that if&nbsp;<em>usesmatplotlib</em>&nbsp;is selected, most of the pylint options relating to imports (ordering, reimporting, positioning etc) are disabled. Also, you may need to increase the timeout value for the question.<br><br>Also, if&nbsp;<em>usesmatplotlib</em>&nbsp;is true, a function&nbsp;&nbsp;<em>print_plot_info(data_type)</em>&nbsp;is made available for use in the test code or post-test extra. This prints various properties of the current plot for grading purposes.&nbsp;<em>data_type</em>&nbsp;should be one of 'points', 'lines' or 'bars'. There are lots of additional parameters to control the output. See the separate section below for details.<br><br>Default (for usesmatplotlib): false.&nbsp;</p></li><li><p><strong>usesnumpy:&nbsp;</strong>if true, the line&nbsp;<em>import numpy as np</em>&nbsp;is inserted at the start of the program, and the usual check for unused imports is turned off. Additionally, since&nbsp;<em>numpy&nbsp;</em>is used in a mathematical context where it is hard to define what variables name might be legitimate, the checking for valid names by pylint is disabled.</p></li><li><p><strong>warnifpassiveoutput</strong>: if set to true and&nbsp;<em>isfunction</em>&nbsp;is also true, generate a style error&nbsp;if the student's code seems to produce output even without any CodeRunner tests being executed. This is probably the result of the student pasting test code as well as requested function(s) into their answer. Default: true</p></li></ul><p>Also, if a file named '_prefix.py' appears in the working directory (i.e. has been attached to the question), the code in that file is inserted into the executable program after any imports and other template-generated code but before the student answer.
    However, the use of an explicit import statement is preferred.</p><p><span style="font-size: 1.40625rem;">The&nbsp;</span><em style="font-size: 1.40625rem;">print_plot_info</em><span style="font-size: 1.40625rem;">&nbsp;function</span><br></p><p>In addition to the mandatory positional parameter&nbsp;<em>data_type</em>, which must be one of&nbsp;<code>points</code>,&nbsp;<code>lines</code>, or&nbsp;<code>bars</code>, the function can take a range of keyword parameters, as defined by the following Python dictionary of default values:</p><pre>DEFAULT_PARAMS = {
    'x_samples': None,        # A list of x-values at which y values should be interpolated.
    'bar_indices': None,      # A list of the 0-origin bar indices to report on. None for all bars.
    'show_xlim': False,       # True to display the x-axis limits
    'show_ylim': False,       # True to display the y-axis limits
    'show_colour': False,     # True to report line/marker colour
    'show_xticklabels': None,  # True to display x-tick labels (defaults True for bars, False otherwise)
    'show_yticklabels': False,  # True to display y-tick labels
    'show_xticks': False,     # True to display x-tick numeric values
    'show_yticks': False,     # True to display y-tick numeric values
    'show_barx': True,        # True to print the x-coordinates of all bars
    'show_linelabels': None,  # True to show line labels, default is True if there's a legend else False
    'sort_points': False,     # True to sort data by x then y.
    'first_num_points': 5,    # Number of points to print at the start of the point list.
    'last_num_points': 5,     # Number of points to print at the end of the point list.
    'float_precision': (1, 1),  # Num digits to display after decimal point for x and y values resp
    'max_label_length': 60,   # Use multiline display if tick label string length exceeds this
    'lines_to_print': None,   # If non-None, a list of indices of lines to print (0 is first line).
    'line_info_only': False,  # True to suppress all except the line/bar/points info
}</pre><br><p></p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1</defaultgrade>
    <penalty>0</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <coderunnertype>python3_stage1</coderunnertype>
    <prototypetype>2</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime>0, 10, 20, ...</penaltyregime>
    <precheck>1</precheck>
    <hidecheck>0</hidecheck>
    <showsource>0</showsource>
    <answerboxlines>60</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload></answerpreload>
    <globalextra></globalextra>
    <useace>1</useace>
    <resultcolumns></resultcolumns>
    <template><![CDATA[import locale
import json
import os
import re
import html
import random

from pytester import PyTester

STANDARD_PYLINT_OPTIONS = ['--disable=trailing-whitespace,superfluous-parens,' +
                      'bad-continuation,min-public-methods,too-few-public-methods,star-args,' +
                      'unbalanced-tuple-unpacking,too-many-statements,' +
                      'consider-using-enumerate,simplifiable-if-statement,' +
                      'consider-iterating-dictionary,trailing-newlines,no-else-return,' +
                      'consider-using-dict-comprehension,unnecessary-lambda,' +
                      'len-as-condition,inconsistent-return-statements,consider-using-join,' +
                      'singleton-comparison,unused-variable,chained-comparison,no-else-break,' +
	                  'consider-using-in,useless-object-inheritance,unnecessary-pass,' +
	                  'reimported,wrong-import-order,wrong-import-position,ungrouped-imports,' +
                      'consider-using-set-comprehension,no-else-raise,duplicate-string-formatting-argument,' + 
                      'consider-using-f-string,unspecified-encoding,' +
                      'consider-using-dict-items,use-a-generator,' +
                      'consider-using-max-builtin,unnecessary-lambda,consider-using-with,' +
                      'consider-using-f-string,use-dict-literal',
                      '--enable=C0326',
                      '--good-names=i,j,k,n,s,c,_'
                      ]

locale.setlocale(locale.LC_ALL, 'C.UTF-8')

KNOWN_PARAMS = {
    'abortonerror': True,
    'allowglobals': False,
    'banglobalcode': True,
    'allownestedfunctions': False,
    'checktemplateparams': True,
    'dpi': 65,
    'echostandardinput': True,
    'extra': 'None',
    'floattolerance': None,
    'forcepylint': False,
    'globalextra': 'None',
    'imagewidth': None,
    'imports': [],
    'isfunction': True,
    'localprechecks': True,
    'maxfunctionlength': 30,
    'maxnumconstants': 4,
    'maxoutputbytes': 10000,
    'maxstringlength': 2000,
    'norun': False,
    'nostylechecks': False,
    'notest': False,
    'parsonsproblemthreshold': None, # The number of checks before parsons' problem displayed
    'precheckers': ['pylint'],
    'prelude': '',
    'proscribedbuiltins': ['exec', 'eval'],
    'proscribedfunctions': [],
    'proscribedconstructs': ["goto"],
    'proscribedsubstrings': [],
    'pylintoptions': [],
    'requiredconstructs': [],
    'requiredfunctiondefinitions': [],
    'requiredfunctioncalls': [],
    'requiredsubstrings': [],
    'requiretypehints': False,
    'restrictedfiles': {
        'disallow': ['__.*', 'prog.*', 'pytester.py'],
    },
    'restrictedmodules': {
        'builtins': {
            'onlyallow': []
        },
        'imp': {
            'onlyallow': []  
        },
        'importlib': {
            'onlyallow': []  
        },
        'os': {
            'disallow': ['system', '_exit', '_.*']
        },
        'subprocess': {
            'onlyallow': []
        },
        'sys': {
            'disallow': ['_.*']
        },
    },
    'runextra': False,
    'showfeedbackwhenright': False,
    'stdinfromextra': False,
    'strictwhitespace': True,
    'stripmain': False,
    'stripmainifpresent': False,
    'testisbash': False,
    'timeout': 5,
    'totaltimeout': 50,
    'suppresspassiveoutput': False,
    'useanswerfortests': False,
    'usesmatplotlib': False,
    'usesnumpy': False,
    'usesubprocess': False,
    'warnifpassiveoutput': True,
}

class TestCase:
    def __init__(self, dict_rep):
        """Construct a testcase from a dictionary representation obtained via JSON"""
        self.testcode = dict_rep['testcode']
        self.stdin = dict_rep['stdin']
        self.expected = dict_rep['expected']
        self.extra = dict_rep['extra']
        self.display = dict_rep['display']
        try:
            self.testtype = int(dict_rep['testtype'])
        except:
            self.testtype = 0
        self.hiderestiffail = bool(int(dict_rep['hiderestiffail']))
        self.useasexample = bool(int(dict_rep['useasexample']))
        self.mark = float(dict_rep['mark'])


# ================= CODE TO DO ALL TWIG PARAMETER PROCESSING ===================

def process_template_params():
    """Extract the template params into a global dictionary PARAMS"""
    global PARAMS
    PARAMS = json.loads("""{{ QUESTION.parameters | json_encode | e('py') }}""")
    checktemplateparams = PARAMS.get('checktemplateparams', True)
    if checktemplateparams:
        unknown_params = set(PARAMS.keys()) - set(KNOWN_PARAMS.keys())
        filtered_params = [param for param in unknown_params if not param.startswith('_')]
        if filtered_params:
            print("Unexpected template parameter(s):", list(sorted(filtered_params)))

    for param_name, default in KNOWN_PARAMS.items():
        if param_name in PARAMS:
            param = PARAMS[param_name]
            if type(param) != type(default) and default is not None:
                print("Template parameter {} has wrong type (expected {})".format(param_name, type(default)))
        else:
            PARAMS[param_name] = default;

    if PARAMS['extra'] == 'stdin':
        PARAMS['stdinfromextra'] = True
    if PARAMS['runextra']:
        PARAMS['extra'] = 'pretest'  # Legacy support
    if PARAMS['timeout'] < 2:
        PARAMS['timeout'] = 2  # Allow 1 extra second freeboard 
    PARAMS['pylintoptions'] = STANDARD_PYLINT_OPTIONS + PARAMS['pylintoptions']
    if PARAMS['allowglobals']:
        PARAMS['pylintoptions'].append("--const-rgx='[a-zA-Z_][a-zA-Z0-9_]{2,30}$'")
    if PARAMS['usesmatplotlib']:
        PARAMS['pylintoptions'].append("--disable=reimported,wrong-import-position,wrong-import-order,unused-import")
    if PARAMS['testisbash']:
        print("testisbash is not implemented for Python")


def get_test_cases():
    """Return an array of Test objects from the template parameter TESTCASES"""
    test_cases = [TestCase(test) for test in json.loads("""{{ TESTCASES | json_encode | e('py') }}""")]
    return test_cases


def scrambled(answer):
    """Return a randomly reordered version of the given answer"""
    if answer.strip() == '':
        return ''
    docstrings = re.findall(r'""".*?"""', answer) + re.findall(r"'''.*?'''", answer)
    rest = re.sub(r'""".*?"""', '', answer)
    rest2 = re.sub(r"'''.*?'''", '', rest)
    lines = [line.strip() for line in (rest2.splitlines() + docstrings) if line.strip()]
    original = lines[:]
    while len(lines) > 1 and original == lines: # Make sure the order changes!
        random.shuffle(lines)
    return '\n'.join(lines)
    

def process_global_params():
    """Plug into the PARAMS variable all the "global" parameters from
       the question and its answer (as distinct from the template parameters).
    """
    PARAMS['STUDENT_ANSWER'] = """{{ STUDENT_ANSWER | e('py') }}""".strip() + '\n'
    PARAMS['SEPARATOR'] = "#<ab@17943918#@>#"
    PARAMS['IS_PRECHECK'] = "{{ IS_PRECHECK }}" == "1"
    PARAMS['QUESTION_PRECHECK'] = {{ QUESTION.precheck }} # Type of precheck: 0 = None, 1 = Empty etc
    PARAMS['ALL_OR_NOTHING'] = "{{ QUESTION.allornothing }}" == "1" # Whether or not all-or-nothing grading is being used
    PARAMS['GLOBAL_EXTRA'] = """{{ QUESTION.globalextra | e('py') }}\n"""
    PARAMS['STEP_INFO'] = json.loads("""{{ QUESTION.stepinfo | json_encode }}""")
    answer = """{{QUESTION.answer | e('py')}}""".strip()
    if answer:
        if PARAMS['STUDENT_ANSWER'].strip() == answer.strip():
            PARAMS['AUTHOR_ANSWER'] = "<p>Your answer is an <i>exact</i> match with the author's solution.</p>"
        else:
            with open("__author_solution.html") as file:
                PARAMS['AUTHOR_ANSWER'] = (file.read().strip() % html.escape(answer))
        with open("__author_solution_scrambled.html") as file:
            PARAMS['AUTHOR_ANSWER_SCRAMBLED'] = (file.read().strip() % html.escape(scrambled(answer))) + "\n"
    else:
        PARAMS['AUTHOR_ANSWER'] = PARAMS['AUTHOR_ANSWER_SCRAMBLED'] = ''


def update_test_cases(test_cases, outcome):
    """Return the updated testcases after replacing all empty expected fields with those from the
       given outcome's test_results which must have a column header 'Got'. Non-empty existing expected
       fields are left unchanged.
       If any errors occur, the return value will be None and the outcome parameter will have had its prologuehtml
       value updated to include an error message.
    """
    try:
        results = outcome['testresults']
        col_num = results[0].index('Got')
        for i in range(len(test_cases)):
            if test_cases[i].expected.strip() == '':
                test_cases[i].expected = results[i + 1][col_num]
    except ValueError:
        outcome['prologuehtml'] = "No 'Got' column in result table from which to get testcase expecteds"
        test_cases = None
    except Exception as e:
        outcome['prologuehtml'] = "Unexpected error ({}) extracting testcase expecteds from sample answer output".format(e)
        test_cases = None
    return test_cases


def get_expecteds_from_answer(params, test_cases):
    """Run all tests using the sample answer rather than the student answer.
       Fill in the expected field of each test case using the sample answer and return
       the updated test case list.
       Return None if the sample answer gave any sort of runtime error
    """
    new_params = {key: value for key, value in params.items()}
    new_params['IS_PRECHECK'] = False
    new_params['nostylechecks'] = True
    new_params['STUDENT_ANSWER'] = """{{ QUESTION.answer | e('py') }}"""
    new_params['running_sample_answer'] = True
    tester = PyTester(new_params, test_cases)
    outcome = tester.test_code()
    if 'prologuehtml' in outcome:
        outcome['prologuehtml'] = "<h2>ERROR IN QUESTION'S SAMPLE ANSWER. PLEASE REPORT</h2>\n" + outcome['prologuehtml']
        return outcome, None
    else:
        return outcome, update_test_cases(test_cases, outcome)


process_template_params()
test_cases = get_test_cases()
process_global_params()

if PARAMS['useanswerfortests']:
    outcome, test_cases = get_expecteds_from_answer(PARAMS, test_cases)

if test_cases:
    tester = PyTester(PARAMS, test_cases)
    outcome = tester.test_code()
    feedback = ''
    parsons_threshold = float('inf') if PARAMS['parsonsproblemthreshold'] is None else PARAMS['parsonsproblemthreshold']
    if outcome['fraction'] != 1 and not PARAMS['IS_PRECHECK'] and PARAMS['STEP_INFO']['numchecks'] + 1 >= parsons_threshold:
        feedback = PARAMS['AUTHOR_ANSWER_SCRAMBLED']
    elif outcome['fraction'] == 1 and PARAMS['showfeedbackwhenright'] and not (PARAMS['IS_PRECHECK']):
        feedback = PARAMS['AUTHOR_ANSWER']
    if feedback:
        if 'epiloguehtml' in outcome:
            if outcome['epiloguehtml'].strip():
                outcome['epiloguehtml'] += '<br>'
        else:
            outcome['epiloguehtml'] = ''
        outcome['epiloguehtml'] += f'<div style="background-color: #f4f4f4">{feedback}</div>'
print(json.dumps(outcome))
]]></template>
    <iscombinatortemplate>1</iscombinatortemplate>
    <allowmultiplestdins>1</allowmultiplestdins>
    <answer></answer>
    <validateonsave>1</validateonsave>
    <testsplitterre><![CDATA[|#<ab@17943918#@>#\n|ms]]></testsplitterre>
    <language>python3</language>
    <acelang></acelang>
    <sandbox>jobesandbox</sandbox>
    <grader>TemplateGrader</grader>
    <cputimelimitsecs>50</cputimelimitsecs>
    <memlimitmb>1500</memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <hoisttemplateparams>0</hoisttemplateparams>
    <templateparamslang>twig</templateparamslang>
    <templateparamsevalpertry>0</templateparamsevalpertry>
    <templateparamsevald>{}</templateparamsevald>
    <twigall>0</twigall>
    <uiplugin>ace</uiplugin>
    <uiparameters></uiparameters>
    <attachments>0</attachments>
    <attachmentsrequired>0</attachmentsrequired>
    <maxfilesize>10240</maxfilesize>
    <filenamesregex></filenamesregex>
    <filenamesexplain></filenamesexplain>
    <displayfeedback>1</displayfeedback>
    <giveupallowed>0</giveupallowed>
    <prototypeextra></prototypeextra>
    <testcases>
<file name="__author_solution_scrambled.html" path="/" encoding="base64">PGRpdiBjbGFzcz0iY29kZXJ1bm5lci10ZXN0LXJlc3VsdHMgYmFkIj4KICAgIDxhIGNsYXNzPSJidG4gYnRuLWxpbmsgY29kZXJ1bm5lci1zY3JhbWJsZWQtc29sdXRpb24tbGluayIgc3R5bGU9ImJhY2tncm91bmQtY29sb3I6I0ZDQyI+U2hvdyBzY3JhbWJsZWQgYXV0aG9yJ3Mgc29sdXRpb248L2E+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJjb2RlcnVubmVyLXNjcmFtYmxlZC1hdXRob3JzLXNvbHV0aW9uIGNvbGxhcHNlIiBleHBhbmRlZD0iZmFsc2UiIHN0eWxlPSJtYXJnaW4tYm90dG9tOjhweCI+CiAgICA8cHJlIGNsYXNzPSJjb2RlLWhpZ2hsaWdodCI+JXM8L3ByZT4KPC9kaXY+CjxzY3JpcHQ+CiAgICB3aW5kb3cuY29kZXJ1bm5lcl9zb2x1dGlvbl9saW5rX2NsaWNrZWQgPSB3aW5kb3cuY29kZXJ1bm5lcl9zb2x1dGlvbl9saW5rX2NsaWNrZWQgfHwgZnVuY3Rpb24oc3JjKSB7CiAgICAgICAgdmFyIHF1ZXN0aW9uID0gc3JjLnRhcmdldC5jbG9zZXN0KCdkaXYuc3BlY2lmaWNmZWVkYmFjaycpOwogICAgICAgIHZhciBzb2x1dGlvbl9kaXYgPSBxdWVzdGlvbi5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjb2RlcnVubmVyLXNjcmFtYmxlZC1hdXRob3JzLXNvbHV0aW9uJylbMF07CiAgICAgICAgdmFyIHNvbHV0aW9uX2xpbmsgPSBxdWVzdGlvbi5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjb2RlcnVubmVyLXNjcmFtYmxlZC1zb2x1dGlvbi1saW5rJylbMF07CiAgICAgICAgdmFyIGNvZGUgPSBxdWVzdGlvbi5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjb2RlLWhpZ2hsaWdodCcpWzBdOwoKICAgICAgICBpZiAoIWNvZGUuY2xhc3NMaXN0LmNvbnRhaW5zKCdoYXMtaGlnaGxpZ2h0JykpIHsKICAgICAgICAgICAgdmFyIGhpZ2hsaWdodCA9IHdpbmRvdy5hY2UucmVxdWlyZSgiYWNlL2V4dC9zdGF0aWNfaGlnaGxpZ2h0Iik7CiAgICAgICAgICAgIGhpZ2hsaWdodChjb2RlLCB7CiAgICAgICAgICAgICAgICBtb2RlOiAiYWNlL21vZGUvcHl0aG9uIiwKICAgICAgICAgICAgICAgIHNob3dHdXR0ZXI6IGZhbHNlCiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGhpZ2hsaWdodGVkKSB7CiAgICAgICAgICAgICAgICBjb2RlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2FjZV9zdGF0aWNfaGlnaGxpZ2h0JylbMF0uc3R5bGVbJ2ZvbnQtc2l6ZSddID0gIjE0cHgiOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgY29kZS5jbGFzc0xpc3QuYWRkKCdoYXMtaGlnaGxpZ2h0Jyk7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIGlmICghJChzb2x1dGlvbl9kaXYpLmhhc0NsYXNzKCdjb2xsYXBzaW5nJykpIHsKICAgICAgICAgICAgaWYgKCQoc29sdXRpb25fZGl2KS5hdHRyKCJleHBhbmRlZCIpID09PSAidHJ1ZSIpIHsKICAgICAgICAgICAgICAgIHNvbHV0aW9uX2xpbmsuaW5uZXJIVE1MID0gIlNob3cgc2NyYW1ibGVkIGF1dGhvcidzIHNvbHV0aW9uIjsKICAgICAgICAgICAgICAgICQoc29sdXRpb25fZGl2KS5jb2xsYXBzZSgnaGlkZScpOwogICAgICAgICAgICAgICAgJChzb2x1dGlvbl9kaXYpLmF0dHIoImV4cGFuZGVkIiwgImZhbHNlIik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBzb2x1dGlvbl9saW5rLmlubmVySFRNTCA9ICJIaWRlIHNjcmFtYmxlZCBhdXRob3IncyBzb2x1dGlvbiI7CiAgICAgICAgICAgICAgICAkKHNvbHV0aW9uX2RpdikuY29sbGFwc2UoJ3Nob3cnKTsKICAgICAgICAgICAgICAgICQoc29sdXRpb25fZGl2KS5hdHRyKCJleHBhbmRlZCIsICJ0cnVlIik7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICB2YXIgY29kZXJ1bm5lcl9hbGxfbGlua3MgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjb2RlcnVubmVyLXNjcmFtYmxlZC1zb2x1dGlvbi1saW5rJyk7CiAKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29kZXJ1bm5lcl9hbGxfbGlua3MubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgZWwgPSBjb2RlcnVubmVyX2FsbF9saW5rc1tpXTsKICAgICAgICBpZiAoIWVsLmNsYXNzTGlzdC5jb250YWlucygnaGFzLWNsaWNrLWhhbmRsZXInKSkgewogICAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHdpbmRvdy5jb2RlcnVubmVyX3NvbHV0aW9uX2xpbmtfY2xpY2tlZCk7CiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2hhcy1jbGljay1oYW5kbGVyJyk7CiAgICAgICAgfQogICAgfSAgICAKPC9zY3JpcHQ+Cgo=</file>
<file name="__author_solution.html" path="/" encoding="base64">PGRpdiBjbGFzcz0iY29kZXJ1bm5lci10ZXN0LXJlc3VsdHMgZ29vZCI+CiAgICA8YSBjbGFzcz0iYnRuIGJ0bi1saW5rIGNvZGVydW5uZXItc29sdXRpb24tbGluayIgc3R5bGU9ImJhY2tncm91bmQtY29sb3I6I0NGQyI+U2hvdyBhdXRob3IncyBzb2x1dGlvbjwvYT4KPC9kaXY+CjxkaXYgY2xhc3M9ImNvZGVydW5uZXItYXV0aG9ycy1zb2x1dGlvbiBjb2xsYXBzZSIgZXhwYW5kZWQ9ImZhbHNlIiBzdHlsZT0ibWFyZ2luLWJvdHRvbTo4cHgiPgogICAgPHByZSBjbGFzcz0iY29kZS1oaWdobGlnaHQiPiVzPC9wcmU+CjwvZGl2Pgo8c2NyaXB0PgogICAgd2luZG93LmNvZGVydW5uZXJfc29sdXRpb25fbGlua19jbGlja2VkID0gd2luZG93LmNvZGVydW5uZXJfc29sdXRpb25fbGlua19jbGlja2VkIHx8IGZ1bmN0aW9uKHNyYykgewogICAgICAgIHZhciBxdWVzdGlvbiA9IHNyYy50YXJnZXQuY2xvc2VzdCgnZGl2LnNwZWNpZmljZmVlZGJhY2snKTsKICAgICAgICB2YXIgc29sdXRpb25fZGl2ID0gcXVlc3Rpb24uZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnY29kZXJ1bm5lci1hdXRob3JzLXNvbHV0aW9uJylbMF07CiAgICAgICAgdmFyIHNvbHV0aW9uX2xpbmsgPSBxdWVzdGlvbi5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjb2RlcnVubmVyLXNvbHV0aW9uLWxpbmsnKVswXTsKICAgICAgICB2YXIgY29kZSA9IHF1ZXN0aW9uLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2NvZGUtaGlnaGxpZ2h0JylbMF07CgogICAgICAgIGlmICghY29kZS5jbGFzc0xpc3QuY29udGFpbnMoJ2hhcy1oaWdobGlnaHQnKSkgewogICAgICAgICAgICB2YXIgaGlnaGxpZ2h0ID0gd2luZG93LmFjZS5yZXF1aXJlKCJhY2UvZXh0L3N0YXRpY19oaWdobGlnaHQiKTsKICAgICAgICAgICAgaGlnaGxpZ2h0KGNvZGUsIHsKICAgICAgICAgICAgICAgIG1vZGU6ICJhY2UvbW9kZS9weXRob24iLAogICAgICAgICAgICAgICAgc2hvd0d1dHRlcjogZmFsc2UKICAgICAgICAgICAgfSwgZnVuY3Rpb24oaGlnaGxpZ2h0ZWQpIHsKICAgICAgICAgICAgICAgIGNvZGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYWNlX3N0YXRpY19oaWdobGlnaHQnKVswXS5zdHlsZVsnZm9udC1zaXplJ10gPSAiMTRweCI7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBjb2RlLmNsYXNzTGlzdC5hZGQoJ2hhcy1oaWdobGlnaHQnKTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgaWYgKCEkKHNvbHV0aW9uX2RpdikuaGFzQ2xhc3MoJ2NvbGxhcHNpbmcnKSkgewogICAgICAgICAgICBpZiAoJChzb2x1dGlvbl9kaXYpLmF0dHIoImV4cGFuZGVkIikgPT09ICJ0cnVlIikgewogICAgICAgICAgICAgICAgc29sdXRpb25fbGluay5pbm5lckhUTUwgPSAiU2hvdyBhdXRob3IncyBzb2x1dGlvbiI7CiAgICAgICAgICAgICAgICAkKHNvbHV0aW9uX2RpdikuaGlkZSgzMDApOwogICAgICAgICAgICAgICAgJChzb2x1dGlvbl9kaXYpLmF0dHIoImV4cGFuZGVkIiwgImZhbHNlIik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBzb2x1dGlvbl9saW5rLmlubmVySFRNTCA9ICJIaWRlIGF1dGhvcidzIHNvbHV0aW9uIjsKICAgICAgICAgICAgICAgICQoc29sdXRpb25fZGl2KS5zaG93KDMwMCk7CiAgICAgICAgICAgICAgICAkKHNvbHV0aW9uX2RpdikuYXR0cigiZXhwYW5kZWQiLCAidHJ1ZSIpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgdmFyIGNvZGVydW5uZXJfYWxsX2xpbmtzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnY29kZXJ1bm5lci1zb2x1dGlvbi1saW5rJyk7CiAKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29kZXJ1bm5lcl9hbGxfbGlua3MubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgZWwgPSBjb2RlcnVubmVyX2FsbF9saW5rc1tpXTsKICAgICAgICBpZiAoIWVsLmNsYXNzTGlzdC5jb250YWlucygnaGFzLWNsaWNrLWhhbmRsZXInKSkgewogICAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHdpbmRvdy5jb2RlcnVubmVyX3NvbHV0aW9uX2xpbmtfY2xpY2tlZCk7CiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2hhcy1jbGljay1oYW5kbGVyJyk7CiAgICAgICAgfQogICAgfSAgICAKPC9zY3JpcHQ+Cgo=</file>
<file name="__languagetask.py" path="/" encoding="base64">IiIiVGhlIGdlbmVyaWMgTGFuZ3VhZ2VUYXNrLCBzdWJjbGFzc2VzIG9mIHdoaWNoIG1hbmFnZSBjb21waWxpbmcgYW5kIGV4ZWN1dGluZwogICBjb2RlIGluIGEgcGFydGljdWxhciBsYW5ndWFnZS4KIiIiCmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lCgpXQVRDSERPR19GUkVFQk9BUkQgPSAxCgpjbGFzcyBDb21waWxlRXJyb3IoRXhjZXB0aW9uKToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBlcnJvcl9tZXNzYWdlKToKICAgICAgICBFeGNlcHRpb24uX19pbml0X18oc2VsZiwgZXJyb3JfbWVzc2FnZSkKCgpjbGFzcyBSdW5FcnJvcihFeGNlcHRpb24pOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGVycm9yX21lc3NhZ2U9JycpOgogICAgICAgIEV4Y2VwdGlvbi5fX2luaXRfXyhzZWxmLCBlcnJvcl9tZXNzYWdlKQoKY2xhc3MgTGFuZ3VhZ2VUYXNrOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHBhcmFtcywgY29kZT1Ob25lKToKICAgICAgICAiIiJJbml0aWFsaXNlIHRoZSBvYmplY3QsIHJlY29yZGluZyB0aGUgcGFyYW1ldGVycyB0aGF0IHdpbGwgY29udHJvbCBjb21waWxhdGlvbiBhbmQKICAgICAgICAgICBydW5uaW5nIHBsdXMgdGhlIGNvZGUgaWYgc3VwcGxpZWQuIENvZGUgbWF5IGJlIGFsdGVybmF0aXZlbHkgYmUgc3VwcGxpZWQgbGF0ZXIgYnkKICAgICAgICAgICBjYWxscyB0byBzZXRfY29kZS4KICAgICAgICAgICBzZWxmLnBhcmFtcyBpcyB0aGUgZGljdGlvbmFyeSBvZiB0ZW1wbGF0ZSAmIGdsb2JhbCBwYXJhbWV0ZXJzIC0gbGFuZ3VhZ2Ugc3BlY2lmaWMuCiAgICAgICAgIiIiCiAgICAgICAgc2VsZi5wYXJhbXMgPSBwYXJhbXMKICAgICAgICBzZWxmLmNvZGUgPSBjb2RlCiAgICAgICAgc2VsZi5leGVjdXRhYmxlX2J1aWx0ID0gRmFsc2UKICAgICAgICBzZWxmLmNvbXBpbGVfZXJyb3JfbWVzc2FnZSA9IE5vbmUKICAgICAgICBzZWxmLmVycm9yX21lc3NhZ2Vfb2Zmc2V0ID0gMAogICAgICAgIHNlbGYuc3RkZXJyID0gJycKICAgICAgICBzZWxmLnN0ZG91dCA9ICcnCiAgICAgICAgc2VsZi5zdGFydF90aW1lID0gZGF0ZXRpbWUubm93KCkKICAgICAgICBzZWxmLnRpbWVkX291dCA9IEZhbHNlCiAgICAgICAgaWYgJ3RvdGFsdGltZW91dCcgbm90IGluIHBhcmFtczoKICAgICAgICAgICAgc2VsZi5wYXJhbXNbJ3RvdGFsdGltZW91dCddID0gMzAgIyBTZWNzCgogICAgZGVmIHNlY29uZHNfcmVtYWluaW5nKHNlbGYpOgogICAgICAgICIiIlRoZSBudW1iZXIgb2Ygc2Vjb25kcyBvZiBleGVjdXRpb24gdGltZSByZW1haW5pbmcgYmVmb3JlIHRoZSB3YXRjaGRvZyB0aW1lciBnb2VzIG9mZi4KICAgICAgICAgICBUaGUgd2F0Y2hkb2cgdGltZXIgZ29lcyBvZmYgMSBzZWNvbmQgYmVmb3JlIHJ1bmd1YXJkIGtpbGxzIHRoZSBqb2IgKGFzIGRldGVybWluZWQgYnkgdGhlICd0aW1lb3V0JyBwYXJhbWV0ZXIpLgogICAgICAgICIiIgogICAgICAgIHRfZWxhcHNlZCA9IChkYXRldGltZS5ub3coKSAtIHNlbGYuc3RhcnRfdGltZSkudG90YWxfc2Vjb25kcygpCiAgICAgICAgcmV0dXJuIHNlbGYucGFyYW1zWyd0b3RhbHRpbWVvdXQnXSAtIHRfZWxhcHNlZCAtIFdBVENIRE9HX0ZSRUVCT0FSRAoKICAgIGRlZiBzZXRfY29kZShzZWxmLCBjb2RlLCBlcnJvcl9tZXNzYWdlX29mZnNldD0wKToKICAgICAgICAiIiJTZXQgdGhlIGNvZGUgdG8gYmUgdXNlZCBmb3Igc3Vic2VxdWVudCBjb21waWxpbmcgYW5kIHJ1bm5pbmcuIFRoZSBvcHRpb25hbCBlcnJvcl9tZXNzYWdlX29mZnNldAogICAgICAgICAgIGlzIGEgbnVtYmVyIHRvIGJlIHN1YnRyYWN0ZWQgZnJvbSBhbnkgZXJyb3IgbWVzc2FnZXMgZ2VuZXJhdGVkIGJ5IGNvbXBpbGUgYW5kIHJ1bl9jb2RlIGNhbGxzLgogICAgICAgICAgIEV4YWN0bHkgaG93IChvciBldmVuICdpZicpIGl0IGlzIHVzZWQgaXMgbGFuZ3VhZ2UgZGVwZW5kZW50LgogICAgICAgICIiIgogICAgICAgIHNlbGYuY29kZSA9IGNvZGUKICAgICAgICBzZWxmLmVycm9yX21lc3NhZ2Vfb2Zmc2V0ID0gZXJyb3JfbWVzc2FnZV9vZmZzZXQKCiAgICBkZWYgY29tcGlsZShzZWxmLCBtYWtlX2V4ZWN1dGFibGU9RmFsc2UpOgogICAgICAgICIiIkNvbXBpbGUgdGhlIGN1cnJlbnRseSBzZXQgY29kZSwgZWl0aGVyIHRvIGFuIG9iamVjdCBmaWxlIG9yCiAgICAgICAgICAgdG8gYW4gZXhlY3V0YWJsZSBmaWxlIGRlcGVuZGluZyBvbiB0aGUgZ2l2ZW4gbWFrZV9leGVjdXRhYmxlIHBhcmFtZXRlci4KICAgICAgICAgICBBZGp1c3QgYW55IGVycm9yIG1lc3NhZ2UgYnkgc3VidHJhY3RpbmcgZXJyb3JfbWVzc2FnZV9vZmZzZXQuCiAgICAgICAgICAgUmFpc2UgQ29tcGlsZUVycm9yIGlmIHRoZSBjb2RlIGRvZXMgbm90CiAgICAgICAgICAgY29tcGlsZSwgd2l0aCB0aGUgY29tcGlsYXRpb24gZXJyb3IgbWVzc2FnZSB3aXRoaW4gdGhlIGV4Y2VwdGlvbgogICAgICAgICAgIGFuZCBhbHNvIHJlY29yZGVkIGluIHNlbGYuY29tcGlsZV9lcnJvcl9tZXNzYWdlLgogICAgICAgICAgIE5vIHJldHVybiB2YWx1ZS4KICAgICAgICAiIiIKICAgICAgICByYWlzZSBOb3RJbXBsZW1lbnRlZEVycm9yKCJjb21waWxlIG5vdCBpbXBsZW1lbnRlZCBieSBjb25jcmV0ZSBjbGFzcyIpCgogICAgZGVmIGRpc2NhcmRfZXhlY3V0YWJsZShzZWxmKToKICAgICAgICAiIiJDYWxsZWQgaWYgc29tZXRoaW5nIGJyZWFrcyBpbiB0aGUgZXhlY3V0YWJsZSBhbmQgaXQgd2lsbCBuZWVkIHJlYnVpbGRpbmcKICAgICAgICAgICAod2l0aCBkaWZmZXJlbnQgc291cmNlLCBwcmVzdW1hYmx5KQogICAgICAgICIiIgogICAgICAgIHNlbGYuZXhlY3V0YWJsZV9idWlsdCA9IEZhbHNlCgogICAgZGVmIHJ1bl9jb2RlKHNlbGYsIHN0YW5kYXJkX2lucHV0PU5vbmUsIGJhc2hfY29tbWFuZD1Ob25lKToKICAgICAgICAiIiJSdW4gdGhlIGNvZGUgaW4gdGhlIGV4ZWN1dGFibGUgcHJvZ3JhbSB0aGF0IGEgY2FsbCB0byBjb21waWxlIGlzIGFzc3VtZWQKICAgICAgICAgICB0byBoYXZlIGNyZWF0ZWQsIHVzaW5nIHRoZSBnaXZlbiBzdGFuZGFyZCBpbnB1dC4KICAgICAgICAgICBJZiBhIGJhc2hfY29tbWFuZCBpcyBzdXBwbGllZCBpdCB1c2VkIGFzIGdpdmVuLgogICAgICAgICAgIE90aGVyd2lzZSB0aGUgY29tbWFuZCB0byBiZSBleGVjdXRlZCBpcyB0aGUgY29tcGlsZWQgZXhlY3V0YWJsZS4KICAgICAgICAgICBSZXR1cm5zIGEgdHVwbGUgb2YgdGhlIG91dHB1dCBmcm9tIHRoZQogICAgICAgICAgIHJ1biBhbmQgYSBzdGRlcnIgKG9yIGEgZGVyaXZhdGl2ZSB0aGVyZW9mKSBzdHJpbmcuIFRob3NlIHR3byB2YWx1ZXMKICAgICAgICAgICBhcmUgYWxzbyByZWNvcmRlZCBpbiBzZWxmLnN0ZG91dCBhbmQgc2VsZi5zdGRlcnIgcmVzcGVjdGl2ZWx5LgogICAgICAgICIiIgogICAgICAgIHJhaXNlIE5vdEltcGxlbWVudGVkRXJyb3IoInJ1bl9jb2RlIG5vdCBpbXBsZW1lbnRlZCBieSBjb25jcmV0ZSBjbGFzcyIp</file>
<file name="__plottools.py" path="/" encoding="base64"></file>
<file name="__pystylechecker.py" path="/" encoding="base64"></file>
<file name="__pytask.py" path="/" encoding="base64"></file>
<file name="__resulttable.py" path="/" encoding="base64">IiIiQ29kZSBmb3IgYnVpbGRpbmcgYW5kIG1hbmFnaW5nIHRoZSByZXN1bHQgdGFibGUgZm9yIHRoZSB0ZXN0cy4KICAgVGhlIHJlc3VsdCB0YWJsZSBpdHNlbGYgKHRoZSAndGFibGUnIGZpZWxkIG9mIGFuIG9iamVjdCBvZiB0aGlzIGNsYXNzKQogICAgaXMgYSBsaXN0IG9mIGxpc3RzIG9mIHN0cmluZ3MuIFRoZSBmaXJzdCByb3cgaXMgdGhlIGhlYWRlciByb3cuCiAgIENvbHVtbnMgYXJlICJUZXN0IiwgIklucHV0IiAob3B0aW9uYWwpLCAiRXhwZWN0ZWQiLCAiR290IiwgImlzY29ycmVjdCIsICJpc2hpZGRlbiIKIiIiCmltcG9ydCBodG1sCmltcG9ydCByZQpmcm9tIGNvbGxlY3Rpb25zIGltcG9ydCBkZWZhdWx0ZGljdAoKTUFYX1NUUklOR19MRU5HVEggPSA0MDAwICAjIDRrIGlzIGRlZmF1bHQgbWF4aW11bSBzdHJpbmcgbGVuZ3RoCgoKY2xhc3MgUmVzdWx0VGFibGU6CiAgICBkZWYgX19pbml0X18oc2VsZiwgcGFyYW1zKToKICAgICAgICBzZWxmLnBhcmFtcyA9IHBhcmFtcwogICAgICAgIHNlbGYubWFyayA9IDAKICAgICAgICBzZWxmLnRhYmxlID0gTm9uZQogICAgICAgIHNlbGYuZmFpbGVkX2hpZGRlbiA9IEZhbHNlCiAgICAgICAgc2VsZi5hYm9ydGVkID0gRmFsc2UKICAgICAgICBzZWxmLmhhc19zdGRpbnMgPSBGYWxzZQogICAgICAgIHNlbGYuaGFzX3Rlc3RzID0gRmFsc2UKICAgICAgICBzZWxmLmhpZGluZyA9IEZhbHNlCiAgICAgICAgc2VsZi5udW1fZmFpbGVkX3Rlc3RzID0gMAogICAgICAgIHNlbGYubWlzc2luZ190ZXN0cyA9IDAKICAgICAgICBzZWxmLmdsb2JhbF9lcnJvciA9ICcnCiAgICAgICAgc2VsZi5jb2x1bW5fZm9ybWF0cyA9IE5vbmUKICAgICAgICBzZWxmLmltYWdlcyA9IGRlZmF1bHRkaWN0KGxpc3QpCiAgICAgICAgZGVmYXVsdF9wYXJhbXMgPSB7CiAgICAgICAgICAgICdzdGRpbmZyb21leHRyYSc6IEZhbHNlLAogICAgICAgICAgICAnc3RyaWN0d2hpdGVzcGFjZSc6IFRydWUsCiAgICAgICAgICAgICdmbG9hdHRvbGVyYW5jZSc6IE5vbmUsCiAgICAgICAgICAgICdBTExfT1JfTk9USElORyc6IFRydWUKICAgICAgICB9CiAgICAgICAgZm9yIHBhcmFtLCB2YWx1ZSBpbiBkZWZhdWx0X3BhcmFtcy5pdGVtcygpOgogICAgICAgICAgICBpZiBwYXJhbSBub3QgaW4gcGFyYW1zOgogICAgICAgICAgICAgICAgc2VsZi5wYXJhbXNbcGFyYW1dID0gdmFsdWUKCgogICAgZGVmIHNldF9oZWFkZXIoc2VsZiwgdGVzdGNhc2VzKToKICAgICAgICAiIiJHaXZlbiB0aGUgc2V0IG9mIHRlc3RjYXNlcywgc2V0IHRoZSBoZWFkZXIgYXMgdGhlIGZpcnN0IHJvdyBvZiB0aGUgcmVzdWx0IHRhYmxlCiAgICAgICAgICAgYW5kIHNldCBmbGFncyB0byBpbmRpY2F0ZSBwcmVzZW5jZSBvciBhYnNlbmNlCiAgICAgICAgICAgb2YgdmFyaW91cyB0YWJsZSBjb2x1bW5zLgogICAgICAgICIiIgogICAgICAgIGhlYWRlciA9IFsnaXNjb3JyZWN0J10KICAgICAgICBzZWxmLmNvbHVtbl9mb3JtYXRzID0gWyclcyddCiAgICAgICAgaWYgYW55KHRlc3QudGVzdGNvZGUuc3RyaXAoKSAhPSAnJyBmb3IgdGVzdCBpbiB0ZXN0Y2FzZXMpOgogICAgICAgICAgICBoZWFkZXIuYXBwZW5kKCJUZXN0IikKICAgICAgICAgICAgc2VsZi5oYXNfdGVzdHMgPSBUcnVlCiAgICAgICAgICAgICMgSWYgdGhlIHRlc3QgY29kZSBzaG91bGQgYmUgcmVuZGVyZWQgaW4gaHRtbCB0aGVuIHNldCB0aGF0IGFzIGNvbHVtbiBmb3JtYXQuCiAgICAgICAgICAgIGlmIGFueShnZXRhdHRyKHRlc3QsICd0ZXN0X2NvZGVfaHRtbCcsIE5vbmUpIGZvciB0ZXN0IGluIHRlc3RjYXNlcyk6CiAgICAgICAgICAgICAgICBzZWxmLmNvbHVtbl9mb3JtYXRzLmFwcGVuZCgnJWgnKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5jb2x1bW5fZm9ybWF0cy5hcHBlbmQoJyVzJykKCiAgICAgICAgc3RkaW5zID0gW3Rlc3QuZXh0cmEgaWYgc2VsZi5wYXJhbXNbJ3N0ZGluZnJvbWV4dHJhJ10gZWxzZSB0ZXN0LnN0ZGluIGZvciB0ZXN0IGluIHRlc3RjYXNlc10KICAgICAgICBpZiBhbnkoc3RkaW4ucnN0cmlwKCkgIT0gJycgZm9yIHN0ZGluIGluIHN0ZGlucyk6CiAgICAgICAgICAgIGhlYWRlci5hcHBlbmQoJ0lucHV0JykKICAgICAgICAgICAgc2VsZi5jb2x1bW5fZm9ybWF0cy5hcHBlbmQoJyVzJykKICAgICAgICAgICAgc2VsZi5oYXNfc3RkaW5zID0gVHJ1ZQogICAgICAgIGhlYWRlciArPSBbJ0V4cGVjdGVkJywgJ0dvdCcsICdpc2NvcnJlY3QnLCAnaXNoaWRkZW4nXQogICAgICAgIHNlbGYuY29sdW1uX2Zvcm1hdHMgKz0gWyclcycsICclcycsICclcycsICclcyddCiAgICAgICAgc2VsZi50YWJsZSA9IFtoZWFkZXJdCgogICAgZGVmIGltYWdlX2NvbHVtbl9udW1zKHNlbGYpOgogICAgICAgICIiIkEgbGlzdCBvZiB0aGUgbnVtYmVycyBvZiBjb2x1bW5zIGNvbnRhaW5pbmcgaW1hZ2VzIiIiCiAgICAgICAgcmV0dXJuIHNvcnRlZChzZXQoW2tleVswXSBmb3Iga2V5IGluIHNlbGYuaW1hZ2VzLmtleXMoKV0pKQoKICAgIGRlZiBnZXRfY29sdW1uX2Zvcm1hdHMoc2VsZik6CiAgICAgICAgIiIiIEFuIG9yZGVyZWQgbGlzdCBvZiB0aGUgY29sdW1uIGZvcm1hdHMuIENvbHVtbnMgY29udGFpbmluZyBpbWFnZXMgYXJlIGZvcmNlZCBpbnRvICVoIGZvcm1hdC4KICAgICAgICAgICAgRG9uJ3QgaGF2ZSBmb3JtYXRzIGZvciBpc2NvcnJlY3QgYW5kIGlzaGlkZGVuIGNvbHVtbnMuCiAgICAgICAgIiIiCiAgICAgICAgaW1hZ2VfY29sdW1ucyA9IHNlbGYuaW1hZ2VfY29sdW1uX251bXMoKQogICAgICAgIGZvcm1hdHMgPSBbc2VsZi5jb2x1bW5fZm9ybWF0c1tpXSBpZiBpIG5vdCBpbiBpbWFnZV9jb2x1bW5zIGVsc2UgJyVoJyBmb3IgaSBpbiByYW5nZShsZW4oc2VsZi5jb2x1bW5fZm9ybWF0cykpXQogICAgICAgIHJldHVybiBmb3JtYXRzWzE6LTJdCgogICAgZGVmIGdldF90YWJsZShzZWxmKToKICAgICAgICAiIiJSZXR1cm4gdGhlIGN1cnJlbnQgcmVzdWx0IHRhYmxlLCB3aXRoIGltYWdlcyBhZGRlZCB0byBhcHByb3ByaWF0ZSBjZWxscy4KICAgICAgICAgICBDb2x1bW5zIHRoYXQgY29udGFpbiBpbWFnZXMgYW55d2hlcmUgYXJlIGNvbnZlcnRlZCB0byAlaCBmb3JtYXQgYW5kIGV4aXN0aW5nIGNvbnRlbnQgaW4gdGhhdCBjb2x1bW4KICAgICAgICAgICBpcyBodG1sLWVzY2FwZWQsIG5ld2xpbmVzIHJlcGxhY2VkIHdpdGggPGJyPiBhbmQgd3JhcHBlZCBpbiBhIGRpdi4KICAgICAgICAgICAiIiIKICAgICAgICByZXN1bHRfdGFibGUgPSBbcm93WzpdIGZvciByb3cgaW4gc2VsZi50YWJsZV0gICMgQ2xvbmUgdGhlIHJlc3VsdCB0YWJsZQoKICAgICAgICAjIEh0bWxpc2UgYWxsIGNvbHVtbnMgY29udGFpbmluZyBpbWFnZXMKICAgICAgICBmb3IgY29sX251bSBpbiBzZWxmLmltYWdlX2NvbHVtbl9udW1zKCk6CiAgICAgICAgICAgIGZvciByb3dfbnVtIGluIHJhbmdlKDEsIGxlbihyZXN1bHRfdGFibGUpKToKICAgICAgICAgICAgICAgIHJlc3VsdF90YWJsZVtyb3dfbnVtXVtjb2xfbnVtXSA9IHNlbGYuaHRtbGlzZShyZXN1bHRfdGFibGVbcm93X251bV1bY29sX251bV0pCgogICAgICAgICMgQXBwZW5kIGltYWdlcwogICAgICAgIGZvciAoKGNvbCxyb3cpLCBpbWFnZV9saXN0KSBpbiBzZWxmLmltYWdlcy5pdGVtcygpOgogICAgICAgICAgICBmb3IgaW1hZ2UgaW4gaW1hZ2VfbGlzdDoKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICByZXN1bHRfdGFibGVbcm93XVtjb2xdICs9ICI8YnI+IiArIGltYWdlCiAgICAgICAgICAgICAgICBleGNlcHQgSW5kZXhFcnJvcjoKICAgICAgICAgICAgICAgICAgICBwYXNzICAjIFRlc3RpbmcgbXVzdCBoYXZlIGFib3J0ZWQgc28gZGlzY2FyZCBpbWFnZQoKICAgICAgICByZXR1cm4gcmVzdWx0X3RhYmxlCgogICAgZGVmIHJlc2V0KHNlbGYpOgogICAgICAgIGlmIGxlbihzZWxmLnRhYmxlKSA+IDE6CiAgICAgICAgICAgIGRlbCBzZWxmLnRhYmxlWzE6XQogICAgICAgIHNlbGYuZ2xvYmFsX2Vycm9yID0gJycKICAgICAgICBzZWxmLm51bV9mYWlsZWRfdGVzdHMgPSBzZWxmLm1hcmsgPSAwCiAgICAgICAgc2VsZi5mYWlsZWRfaGlkZGVuID0gc2VsZi5oaWRpbmcgPSBzZWxmLmFib3J0ZWQgPSBGYWxzZQoKICAgIGRlZiB0ZXN0c19taXNzZWQoc2VsZiwgbnVtKToKICAgICAgICAiIiJSZWNvcmQgdGhlIGZhY3QgdGhhdCB3ZSdyZSBtaXNzaW5nIHNvbWUgdGVzdCByZXN1bHRzICh0aW1lb3V0PykiIiIKICAgICAgICBzZWxmLm1pc3NpbmdfdGVzdHMgPSBudW0KCiAgICBkZWYgcmVjb3JkX2dsb2JhbF9lcnJvcihzZWxmLCBlcnJvcl9tZXNzYWdlKToKICAgICAgICAiIiJSZWNvcmQgc29tZSBzb3J0IG9mIGdsb2JhbCBmYWlsdXJlIiIiCiAgICAgICAgc2VsZi5nbG9iYWxfZXJyb3IgPSBlcnJvcl9tZXNzYWdlCgogICAgZGVmIGFkZF9yb3coc2VsZiwgdGVzdGNhc2UsIHJlc3VsdCwgZXJyb3I9JycpOgogICAgICAgICIiIkFkZCBhIHJlc3VsdCByb3cgdG8gdGhlIHRhYmxlIGZvciB0aGUgZ2l2ZW4gdGVzdCBhbmQgcmVzdWx0IiIiCiAgICAgICAgaXNfY29ycmVjdCA9IHNlbGYuY2hlY2tfY29ycmVjdG5lc3MocmVzdWx0ICsgZXJyb3IsIHRlc3RjYXNlLmV4cGVjdGVkKQogICAgICAgIHJvdyA9IFtpc19jb3JyZWN0XQogICAgICAgIGlmIHNlbGYuaGFzX3Rlc3RzOgogICAgICAgICAgICBpZiBnZXRhdHRyKHRlc3RjYXNlLCAndGVzdF9jb2RlX2h0bWwnLCBOb25lKToKICAgICAgICAgICAgICAgIHJvdy5hcHBlbmQodGVzdGNhc2UudGVzdF9jb2RlX2h0bWwpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICByb3cuYXBwZW5kKHRlc3RjYXNlLnRlc3Rjb2RlKQogICAgICAgIGlmIHNlbGYuaGFzX3N0ZGluczoKICAgICAgICAgICAgcm93LmFwcGVuZCh0ZXN0Y2FzZS5leHRyYSBpZiBzZWxmLnBhcmFtc1snc3RkaW5mcm9tZXh0cmEnXSBlbHNlIHRlc3RjYXNlLnN0ZGluKQogICAgICAgIHJvdy5hcHBlbmQodGVzdGNhc2UuZXhwZWN0ZWQucnN0cmlwKCkpCiAgICAgICAgbWF4X2xlbiA9IHNlbGYucGFyYW1zLmdldCgnbWF4c3RyaW5nbGVuZ3RoJywgTUFYX1NUUklOR19MRU5HVEgpCiAgICAgICAgcmVzdWx0ID0gc2FuaXRpc2UocmVzdWx0LnN0cmlwKCdcbicpLCBtYXhfbGVuKQoKICAgICAgICBpZiBlcnJvcjoKICAgICAgICAgICAgZXJyb3JfbWVzc2FnZSA9ICcqKiogUlVOIFRJTUUgRVJST1IoUykgKioqXG4nICsgc2FuaXRpc2UoZXJyb3IsIG1heF9sZW4pCiAgICAgICAgICAgIGlmIHJlc3VsdDoKICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCArICdcbicgKyBlcnJvcl9tZXNzYWdlCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICByZXN1bHQgPSBlcnJvcl9tZXNzYWdlCiAgICAgICAgcm93LmFwcGVuZChyZXN1bHQpCgogICAgICAgIGlmIGlzX2NvcnJlY3Q6CiAgICAgICAgICAgIHNlbGYubWFyayArPSB0ZXN0Y2FzZS5tYXJrCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2VsZi5udW1fZmFpbGVkX3Rlc3RzICs9IDEKICAgICAgICByb3cuYXBwZW5kKGlzX2NvcnJlY3QpCiAgICAgICAgZGlzcGxheSA9IHRlc3RjYXNlLmRpc3BsYXkudXBwZXIoKQogICAgICAgIGlzX2hpZGRlbiA9ICgKICAgICAgICAgICAgc2VsZi5oaWRpbmcgb3IKICAgICAgICAgICAgZGlzcGxheSA9PSAnSElERScgb3IKICAgICAgICAgICAgKGRpc3BsYXkgPT0gJ0hJREVfSUZfU1VDQ0VFRCcgYW5kIGlzX2NvcnJlY3QpIG9yCiAgICAgICAgICAgIChkaXNwbGF5ID09ICdISURFX0lGX0ZBSUwnIGFuZCBub3QgaXNfY29ycmVjdCkKICAgICAgICApCiAgICAgICAgcm93LmFwcGVuZChpc19oaWRkZW4pCiAgICAgICAgaWYgbm90IGlzX2NvcnJlY3QgYW5kIGlzX2hpZGRlbjoKICAgICAgICAgICAgc2VsZi5mYWlsZWRfaGlkZGVuID0gVHJ1ZQogICAgICAgIGlmIG5vdCBpc19jb3JyZWN0IGFuZCB0ZXN0Y2FzZS5oaWRlcmVzdGlmZmFpbDoKICAgICAgICAgICAgc2VsZi5oaWRpbmcgPSBUcnVlCiAgICAgICAgc2VsZi50YWJsZS5hcHBlbmQocm93KQogICAgICAgIGlmIGVycm9yOgogICAgICAgICAgICBzZWxmLmFib3J0ZWQgPSBUcnVlCgogICAgZGVmIGdldF9tYXJrKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLm1hcmsgaWYgc2VsZi5udW1fZmFpbGVkX3Rlc3RzID09IDAgb3Igbm90IHNlbGYucGFyYW1zWydBTExfT1JfTk9USElORyddIGVsc2UgMAoKICAgIEBzdGF0aWNtZXRob2QKICAgIGRlZiBodG1saXNlKHMpOgogICAgICAgICIiIkNvbnZlcnQgdGhlIGdpdmVuIHN0cmluZyB0byBodG1sIGJ5IGVzY2FwaW5nICc8JyBhbmQgJz4nLgogICAgICAgICAgIFdyYXAgdGhlIHdob2xlIGxvdCBpbiBhIGRpdiB0YWcgc28gdGhlIGRpZmYgY2hlY2tlciBwcm9jZXNzZXMgdGhlIHdob2xlIHRhYmxlIGNlbGwsCiAgICAgICAgICAgYW5kIHdpdGhpbiB0aGF0IGEgcHJlIHRhZyBmb3IgY29ycmVjdCBsYXlsb3V0LgogICAgICAgICIiIgogICAgICAgIHJldHVybiAnPGRpdj48cHJlIGNsYXNzPSJ0YWJsZWNlbGwiPicgKyBodG1sLmVzY2FwZShzKSArICc8L3ByZT48L2Rpdj4nCgogICAgZGVmIGFkZF9pbWFnZShzZWxmLCBpbWFnZV9odG1sLCBjb2x1bW5fbmFtZSwgcm93X251bSk6CiAgICAgICAgIiIiU3RvcmUgdGhlIGdpdmVuIGh0bWxfaW1hZ2UgZm9yIGxhdGVyIGluY2x1c2lvbiBpbiB0aGUgY2VsbCBhdCB0aGUgZ2l2ZW4gcm93IGFuZCBnaXZlbiBjb2x1bW4uCiAgICAgICAgICAgY29sdW1uX25hbWUgaXMgdGhlIG5hbWUgdXNlZCBmb3IgdGhlIGNvbHVtbiBpbiB0aGUgZmlyc3QgKGhlYWRlcikgcm93LgogICAgICAgICAgIHJvd19udW0gaXMgdGhlIHJvdyBudW1iZXIgKDAgb3JpZ2luLCBub3QgaW5jbHVkaW5nIHRoZSBoZWFkZXIgcm93KS4KICAgICAgICAiIiIKICAgICAgICBjb2x1bW5fbnVtID0gc2VsZi50YWJsZVswXS5pbmRleChjb2x1bW5fbmFtZSkKICAgICAgICBzZWxmLmltYWdlc1tjb2x1bW5fbnVtLCByb3dfbnVtICsgMV0uYXBwZW5kKGltYWdlX2h0bWwpCgogICAgZGVmIGVxdWFsX3N0cmluZ3Moc2VsZiwgczEsIHMyKToKICAgICAgICAiIiIgQ29tcGFyZSB0aGUgdHdvIHN0cmluZ3MgczEgYW5kIHMyIChleHBlY3RlZCBhbmQgZ290IHJlc3BlY3RpdmVseSkKICAgICAgICAgICAgZm9yIGVxdWFsaXR5LCB3aXRoIHJlZ2FyZCB0byB0aGUgdGVtcGxhdGUgcGFyYW1ldGVycwogICAgICAgICAgICBzdHJpY3R3aGl0ZXNwYWNlIGFuZCBmbG9hdHRvbGVyYW5jZS4KICAgICAgICAiIiIKICAgICAgICBzMSA9IHMxLnJzdHJpcCgpCiAgICAgICAgczIgPSBzMi5yc3RyaXAoKQogICAgICAgIGlmIG5vdCBzZWxmLnBhcmFtc1snc3RyaWN0d2hpdGVzcGFjZSddOgogICAgICAgICAgICAjIENvbGxhcHNlIHdoaXRlIHNwYWNlIGlmIHN0cmljdCB3aGl0ZXNwYWNlIGlzIG5vdCBlbmZvcmNlZAogICAgICAgICAgICBzMSA9IHJlLnN1YihyJ1xzKycsICcgJywgczEpCiAgICAgICAgICAgIHMyID0gcmUuc3ViKHInXHMrJywgJyAnLCBzMikKICAgICAgICBpZiBzZWxmLnBhcmFtc1snZmxvYXR0b2xlcmFuY2UnXSBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gczEgPT0gczIKICAgICAgICBlbHNlOgogICAgICAgICAgICAjIE1hdGNoaW5nIHdpdGggYSBmbG9hdGluZyBwb2ludCB0b2xlcmFuY2UuCiAgICAgICAgICAgICMgVXNlIGZsb2F0IHBhdHRlcm4gZnJvbSBNYXJrdXMgU2NobWFzc21hbm4gYXQKICAgICAgICAgICAgIyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMjY0MzAwOS9yZWd1bGFyLWV4cHJlc3Npb24tZm9yLWZsb2F0aW5nLXBvaW50LW51bWJlcnMKICAgICAgICAgICAgIyBleGNlcHQgd2UgZG9uJ3QgbWF0Y2ggaW5mIG9yIG5hbiB3aGljaCBjYW4gYmUgZW1iZWRkZWQgaW4gdGV4dCBzdHJpbmdzLgogICAgICAgICAgICB0b2wgPSBmbG9hdChzZWxmLnBhcmFtc1snZmxvYXR0b2xlcmFuY2UnXSkKICAgICAgICAgICAgZmxvYXRfcGF0ID0gcicoWy0rXT8oPzooPzooPzpbMC05XStbLl0/WzAtOV0qfFsuXVswLTldKykoPzpbZWRdWy0rXT9bMC05XSspPykpKScKICAgICAgICAgICAgczFfYml0cyA9IHJlLnNwbGl0KGZsb2F0X3BhdCwgczEpCiAgICAgICAgICAgIHMyX2JpdHMgPSByZS5zcGxpdChmbG9hdF9wYXQsIHMyKQogICAgICAgICAgICBpZiBsZW4oczFfYml0cykgIT0gbGVuKHMyX2JpdHMpOgogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIG1hdGNoID0gVHJ1ZQogICAgICAgICAgICBmb3IgYml0MSwgYml0MiBpbiB6aXAoczFfYml0cywgczJfYml0cyk6CiAgICAgICAgICAgICAgICBiaXQxID0gYml0MS5zdHJpcCgpCiAgICAgICAgICAgICAgICBiaXQyID0gYml0Mi5zdHJpcCgpCiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgZjEgPSBmbG9hdChiaXQxKQogICAgICAgICAgICAgICAgICAgIGYyID0gZmxvYXQoYml0MikKICAgICAgICAgICAgICAgICAgICBpZiBhYnMoZjEgLSBmMikgPiB0b2wgKiAxLjAwMTogIyBBbGxvdyB0b2xlcmFuY2Ugb24gdGhlIGZsb2F0IHRvbGVyYW5jZSEKICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPSBGYWxzZQogICAgICAgICAgICAgICAgZXhjZXB0IFZhbHVlRXJyb3I6CiAgICAgICAgICAgICAgICAgICAgaWYgYml0MSAhPSBiaXQyOgogICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IEZhbHNlCiAgICAgICAgICAgIHJldHVybiBtYXRjaAoKICAgIGRlZiBjaGVja19jb3JyZWN0bmVzcyhzZWxmLCBleHBlY3RlZCwgZ290KToKICAgICAgICAiIiJUcnVlIGlmZiBleHBlY3RlZCBtYXRjaGVzIGdvdCB3aXRoIHJlbGF4ZWQgd2hpdGUgc3BhY2UgcmVxdWlyZW1lbnRzLgogICAgICAgICAgIEFkZGl0aW9uYWxseSwgaWYgdGhlIHRlbXBsYXRlIHBhcmFtZXRlciBmbG9hdHRvbGVyYW5jZSBpcyBzZXQgYW5kIGlzCiAgICAgICAgICAgbm9uLXplcm8sIHRoZSB0d28gc3RyaW5ncyB3aWxsIGJlIHNwbGl0IGJ5IGEgZmxvYXRpbmctcG9pbnQgbGl0ZXJhbAogICAgICAgICAgIHBhdHRlcm4gYW5kIHRoZSBmbG9hdGluZy1wb2ludCBiaXRzIHdpbGwgYmUgbWF0Y2hlZCB0byB3aXRoaW4gdGhlCiAgICAgICAgICAgZ2l2ZW4gYWJzb2x1dGUgdG9sZXJhbmNlLgogICAgICAgICIiIgogICAgICAgIGV4cGVjdGVkX2xpbmVzID0gZXhwZWN0ZWQuc3RyaXAoKS5zcGxpdGxpbmVzKCkKICAgICAgICBnb3RfbGluZXMgPSBnb3Quc3RyaXAoKS5zcGxpdGxpbmVzKCkKICAgICAgICBpZiBsZW4oZ290X2xpbmVzKSAhPSBsZW4oZXhwZWN0ZWRfbGluZXMpOgogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICBlbHNlOgogICAgICAgICAgICBmb3IgZXhwLCBnb3QgaW4gemlwKGV4cGVjdGVkX2xpbmVzLCBnb3RfbGluZXMpOgogICAgICAgICAgICAgICAgaWYgbm90IHNlbGYuZXF1YWxfc3RyaW5ncyhleHAsIGdvdCk6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgcmV0dXJuIFRydWUKCgpkZWYgc2FuaXRpc2UocywgbWF4X2xlbj1NQVhfU1RSSU5HX0xFTkdUSCk6CiAgICAiIiJSZXBsYWNlIG5vbi1wcmludGluZyBjaGFycyB3aXRoIGVzY2FwZSBzZXF1ZW5jZXMsIHJpZ2h0LXN0cmlwLgogICAgICAgTGltaXQgcyB0byBtYXhfbGVuIGJ5IHNuaXBwaW5nIG91dCBiaXRzIGluIHRoZSBtaWRkbGUuCiAgICAiIiIKICAgIHJlc3VsdCA9ICcnCiAgICBpZiBsZW4ocykgPiBtYXhfbGVuOgogICAgICAgIHMgPSBzWzA6IG1heF9sZW4gLy8gMl0gKyAiXG4qKiogPHNuaXA+ICoqKlxuIiArIHNbLW1heF9sZW4gLy8gMjpdCiAgICBsaW5lcyA9IHMucnN0cmlwKCkuc3BsaXRsaW5lcygpCiAgICBmb3IgbGluZSBpbiBsaW5lczoKICAgICAgICBmb3IgYyBpbiBsaW5lLnJzdHJpcCgpICsgJ1xuJzoKICAgICAgICAgICAgaWYgYyA8ICcgJyBhbmQgYyAhPSAnXG4nOgogICAgICAgICAgICAgICAgaWYgYyA9PSAnXHQnOgogICAgICAgICAgICAgICAgICAgIGMgPSByJ1x0JwogICAgICAgICAgICAgICAgZWxpZiBjID09ICdccic6CiAgICAgICAgICAgICAgICAgICAgYyA9IHInXHInCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIGMgPSByJ1x7OjAzb30nLmZvcm1hdChvcmQoYykpCiAgICAgICAgICAgIHJlc3VsdCArPSBjCiAgICByZXR1cm4gcmVzdWx0LnJzdHJpcCgpCg==</file>
<file name="__tester.py" path="/" encoding="base64"></file>
<file name="__watchdog.py" path="/" encoding="base64">IyEvdXNyL2Jpbi9weXRob24KIyBmaWxlOiB3YXRjaGRvZy5weQojIGxpY2Vuc2U6IE1JVCBMaWNlbnNlCiMgRnJvbSBodHRwczovL2R6b25lLmNvbS9hcnRpY2xlcy9zaW1wbGUtcHl0aG9uLXdhdGNoZG9nLXRpbWVyCgppbXBvcnQgc2lnbmFsCgpjbGFzcyBXYXRjaGRvZyhFeGNlcHRpb24pOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHRpbWUpOgogICAgICAgICIiIlNldCB1cCBhIHRpbWVyIGFsYXJtIHRvIGdvIG9mZiBpbiAndGltZScgc2Vjcy4iIiIKICAgICAgICBzZWxmLnRpbWUgPSB0aW1lCgogICAgZGVmIF9fZW50ZXJfXyhzZWxmKToKICAgICAgICAiIiJDYWxsZWQgb24gZW50ZXJpbmcgYSAnd2l0aCcgYmxvY2siIiIKICAgICAgICBzaWduYWwuc2lnbmFsKHNpZ25hbC5TSUdBTFJNLCBzZWxmLmhhbmRsZXIpCiAgICAgICAgc2lnbmFsLmFsYXJtKHNlbGYudGltZSkKCiAgICBkZWYgX19leGl0X18oc2VsZiwgdHlwZSwgdmFsdWUsIHRyYWNlYmFjayk6CiAgICAgICAgIiIiRXhpdGluZyB0aGUgd2l0aCBibG9jay4gQ2FuY2VsIHRoZSB3YXRjaGRvZyIiIgogICAgICAgIHNpZ25hbC5hbGFybSgwKQoKICAgIGRlZiBoYW5kbGVyKHNlbGYsIHNpZ251bSwgZnJhbWUpOgogICAgICAgICIiIkFsYXJtIHdlbnQgb2ZmLiBSYWlzZSBXYXRjaGRvZyBleGNlcHRpb24iIiIKICAgICAgICByYWlzZSBzZWxmCgogICAgZGVmIF9fc3RyX18oc2VsZik6CiAgICAgICAgcmV0dXJuICJXYXRjaGRvZyB0aW1lciBleHBpcmVkIGFmdGVyIHt9IHNlY3MiLmZvcm1hdChzZWxmLnRpbWUpCg==</file>
<file name="pytester.py" path="/" encoding="base64"></file>
    </testcases>
  </question>

</quiz>